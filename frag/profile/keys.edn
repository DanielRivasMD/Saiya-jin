;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; key modifiers
{:des "Modifier key remappings"
 :rules
 [; quit
  [:!C#Pq [:!Cq ["command-q" 0]] ["command-q" 1]]                                                  ;
  [:!C#Pq ["command-q" 1] nil {:delayed {:invoked ["command-q" 0] :canceled ["commandq" 0]}}]      ;

  ; joker
  [:##caps_lock :!EWright_command nil {:alone :escape}]              ;

  ; hyper
  [:#Ptab :!OTCright_shift nil {:alone :tab}]                        ; spectacle control, speak & app launcher

  ; grave
  [:#Pright_control :right_control nil {:alone [:f3]}]               ;

  ; modifiers
  [:#Pescape :!EWright_shift nil {:alone [:!EWRf3]}]                 ; menu search. 'term' pop-up new
  [:#Pdelete_or_backspace :!EQright_shift nil {:alone [:!EQRf3]}]    ; now empty

  ; lefts
  ; [:#Ptab :!WQright_shift nil {:alone [:tab]}]                       ;
  [:#Pleft_control :left_control nil {:alone [:!Tf3]}]               ; alfred window switcher
  [:#Pleft_option :left_option nil {:alone [:!Otab]}]                ; global in-app window cycler. 'term' session locked
  [:#Pleft_command :left_command nil {:alone [:!Ctab]}]              ; switch most recent app

  ; DOC: silenced right shift in favor of 'browser' binding
  ; rights
  ; [:#Pright_shift :right_shift nil {:alone [:!Sf3]}]               ;
  [:#Pright_option :right_option nil {:alone [:!Of3]}]               ; alfred paste
  [:#Pright_command :right_command nil {:alone [:!Cf3]}]             ; alfred clipboard select
  ]}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; ; You can use karabiner command-line interface to set variables when you open specifc type of files in your editor. See ISSUE #79.

; {:profiles
;  {:Default {:default true
;             :sim     50
;             :delay   80
;             :alone   120
;             :held    70}}
;  :simlayers {:js-mode {:key :period :condi ["in-js" 1]} ;;  karabiner_cli --set-variables {"in-js": 1}
;              :go-mode {:key :period :condi ["in-go" 1]} ;;  karabiner_cli --set-variables {"in-go": 1}
;              :py-mode {:key :period :condi ["in-python" 1]} ;;  karabiner_cli --set-variables {"in-python": 1}
;              :elixir-mode {:key :period :condi ["in-elixir" 1]} ;;  karabiner_cli --set-variables {"in-elixir": 1}
;              :rust-mode {:key :period :condi ["in-rust" 1]}} ;;  karabiner_cli --set-variables {"in-rust": 1}
;  :main [{:des "jsdot"
;          :rules [:js-mode
;                  [:a [:c :o :n :s :o :l :e :period :l :o :g :!S9 :!S0 :left_arrow]] ; -> console.log()
;                  [:v [:j :a :v :a :s :c :r :i :p :t :spacebar]]]} ; -> javascript
;         {:des "godot"
;          :rules[:go-mode
;                 [:a [:f :m :t :period :!Sp :r :i :n :t :l :n :!S9 :!S0 :left_arrow]] ; -> fmt.Println()
;                 [:v [:g :o :l :a :n :g :spacebar]]]} ; -> golang
;         {:des "pydot"
;          :rules[:py-mode
;                 [:a [:p :r :i :n :t :!S9 :!S0 :left_arrow]] ; -> print()
;                 [:v [:p :y :t :h :o :n :spacebar]]]} ; -> python
;         {:des "elixdot"
;          :rules[:elixir-mode
;                 [:a [:!Si :!So :period :p :u :t :s :!S9 :!S0 :left_arrow]] ; -> IO.puts()
;                 [:v [:e :l :i :x :i :r :spacebar]]]} ; -> elixir
;         {:des "rustdot"
;          :rules[:rust-mode
;                 [:a [:p :r :i :n :t :l :n :!S1 :!S9 :!S0 :left_arrow]] ; -> println!()
;                 [:v [:r :u :s :t :spacebar]]]}]} ; -> rust

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; {:des   "Press right_shift twice to enter double shift mode, press right_shift once to leave it"
;                        :rules [[:right_shift ["double-right-shift-mode" 1] ["shift-pressed-once" 1]]
;                                [:right_shift [:right_shift ["shift-pressed-once" 1]] ["double-right-shift-mode" 0] {:delayed {:invoked ["shift-pressed-once" 0] :canceled ["shift-pressed-once" 0]}}]
;                                :double-right-shift-mode
;                                [:right_shift ["double-right-shift-mode" 0]]
;                                [:a "say 'know we are in double shift mode'"]]}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
